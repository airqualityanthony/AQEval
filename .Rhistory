a[1] <- NA
a[!is.na(a)]
a[1:10] <- NA
a
a[!is.na(a)]
a <- NULL
a[!is.na(a)]
length(a[!is.na(a)])
unique(a[!is.na(a)])
a <- 1:10
unique(a[!is.na(a)])
devtools::unload(); devtools::load_all()
findNearSites()
findNearSites(1,1)
findNearSites(test$lat, test$lon)
test <- openair::importAURN("my1", year=2000:2005, meta=TRUE)
findNearSites(test$lat, test$lon)
findNearSites(test$latitude, test$longitude)
unique(test$latitude)
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude)
test <- openair::importAURN(c("my1", "LED6"), year=2000:2005, meta=TRUE)
findNearSites(test$latitude, test$longitude)
unique(test$latitude)
test <- openair::importAURN(c("my1", "led6"), year=2000:2005, meta=TRUE)
unique(test$latitude)
unique(test$site)
test <- openair::importAURN(c("my1", "leed"), year=2000:2005, meta=TRUE)
unique(test$site)
findNearSites(test$latitude, test$longitude)
unique(test$latitude)
ref <- importMeta()
?importMeta
ref <- importMeta(all=TRUE)
ref$start_date
ref$end_date
Sys.Date()
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref)
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref)
test <- openair::importAURN(c("my1"), year=2000:2005, meta=TRUE)
findNearSites(test$latitude, test$longitude, ref=ref)
findNearSites(test$latitude, test$longitude, ref=ref, start="2010-10-01")
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")
findNearSites(test$latitude, test$longitude, ref=ref, start="1995-10-01")
findNearSites(test$latitude, test$longitude, ref=ref, start="2004-10-01")
findNearSites(test$latitude, test$longitude, ref=ref, start="2005-10-01")
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$start_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$start_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$start_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$start_date
as.Date(Sys.Date())
ref$end_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$end_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$end_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2015-10-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2005-10-01", end="2010-12-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2005-10-01", end="2015-12-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2005-10-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2005-10-01")$end_date
findNearSites(test$latitude, test$longitude, ref=ref)$end_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2001-01-01")$end_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2001-01-01")$end_date
devtools::unload(); devtools::load_all()
findNearSites(test$latitude, test$longitude, ref=ref, start="2001-01-01")$end_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2001-01-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2001-01-01", end="2005-01-01")$start_date
findNearSites(test$latitude, test$longitude, ref=ref, start="2001-01-01", end="2005-01-01")$end_date
as.Date(2000)
as.Date(as.character(2000))
as.Date(as.POXISct(as.character(2000))
)
devtools::unload(); devtools::load_all()
findNearSites(test$lat, test$long, ref=ref, start="2001-01-01", end="2005-01-01")$end_date
lat <- test$latitude
lon <- test$longitude
findNearSites(lat, lon, ref=ref, start="2001-01-01", end="2005-01-01")$end_date
devtools::unload(); devtools::load_all()
findNearSites(lat, lon, ref=ref, start="2001-01-01", end="2005-01-01")$end_date
findNearSites(lat, lon, ref=ref, start="2001-01-01")$end_date
devtools::unload(); devtools::load_all()
findNearSites(lat, lon, ref=ref, start="2001-01-01")$end_date
findNearSites(lat, lon, ref=ref, start="1900-01-01")$end_date
findNearSites(lat, lon, ref=ref, start="2016-01-01")$end_date
findNearSites(lat, lon, ref=ref, start="2000-01-01")$end_date
as.Date("2020-01-01") +1
as.Date("2020-01-01") +365
as.Date("2020-01-01") +366
edit(testBreakPoints)
edit(findBreakPoints)
edit(quantBreakPoints)
install.packages("devtools")
install.packages("pkgdown")
install.packages("remotes")
devtools::install_local(file.choose())
require(pems.utils)
require(loa)
devtools::install_local(file.choose())
devtools::install_local(file.choose(), dependencies = TRUE)
require(pems.utils)
install.packages("pems.utils")
require(pems.utils)
devtools::install_local(choose.files())
require(AQEval)
aq.data
example("quantBreakPoints")
example("quantBreakPoints")
temp
quantBreakPoints(temp, "no2")
quantBreakSegments(temp, "no2")
quantBreakPoints(temp, "no2", h=0.3)
quantBreakSegments(temp, "no2", h=0.3)
quantBreakPoints(temp, "no2", h=0.3)
quantBreakSegments(temp, "no2", h=0.3)
quantBreakSegments(temp, "no2", h=0.35)
quantBreakSegments(temp, "no2", h=0.25)
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
require(AQEval)
example("quantBreakPoints")
packageVersion("segmented")
devtools::install_local(file.choose())
require(AQEval)
example("quantBreakPoints")
packageVersion("segmented")
install.packages("segemented", version="1.4.0")
install.packages("segemented", version="1.4-0")
install.versions("segemented", version="1.4-0")
requires("remotes")
require("remotes")
require(remotes)
install_version("segmented", version = "1.4-0", repos = "http://cran.us.r-project.org")
require(AQEval)
example("quantBreakPoints")
require(remotes)
install_version("segmented", version = "1.3-4", repos = "http://cran.us.r-project.org")
require(AQEval)
example("quantBreakPoints")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
require(remotes)
install_version("segmented", version = "1.3-4", repos = "http://cran.us.r-project.org")
require(AQEval)
example("quantBreakPoints")
usethis::use_package("segmented", version=="1.3-4")
usethis::use_package("segmented", version="==1.3-4")
?usethis::use_package
devtools::document()
require(loa)
require(loa)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
usethis::use_pkgdown()
grey.area::splat_date()
devtools::document()
devtools::build()
devtools::check()
?segmented
?seg.control
edit(segmented)
edit(segmented::segmented)
edit(segmented::segmented.lm)
edit(segmented::segmented.lm)
test <- edit(segmented::segmented.lm)
test
install.packages("segmented")
install.packages("segmented")
edit(segmented::segmented.lm)
edit(segmented::test)
edit(test)
edit(segmented::segmented.lm)
require(AQEval)
example("quantBreakPoints")
install.packages("segmented")
install.packages("segmented")
devtools::load_all()
example(quantBreakPoints)
example("quantBreakPoints")
example(quantBreakPoints)
example(spectralFrequancy)
devtools::document()
?spectralFrequency
example(quantBreakPoints)
example("quantBreakPoints")
?quantBreakPoints
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
devtools::unload()
devtools::load_all()
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
devtools::unload()
devtools::load_all()
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
devtools::unload()
devtools::load_all()
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
edit(segmented::segmented.lm)
devtools::unload()
devtools::load_all()
edit(segmented::segmented.lm)
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
devtools::unload()
require(remotes)
install_version("segmented", version = "1.3-4", repos = "http://cran.us.r-project.org")
edit(segmented::segmented.lm)
devtools::load_all()
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
devtools::unload()
devtools::load_all()
devtools::load_all()
example(AQEval)
example(quantBreakPoints)
example("quantBreakPoints")
?quantBreakPoints
devtools::document()
example("quantBreakPoints")
?quantBreakPoints
#using openair timeAverage to covert 1-hour data to 1-day averages
temp <- openair::timeAverage(aq.data, "1 day")
#break-points
quantBreakPoints(temp, "no2", h=0.3)
#break-segments
quantBreakSegments(temp, "no2", h=0.3)
[Package
segmented::segmented
segmented::segmented.lm
devtools::load_all()
example(quantBreakSegments)
example("quantBreakSegments")
example("quantBreakSegments")
?quantBreakSegments
example("quantBreakSegments")
example("quantBreakPoints")
devtools::document()
example("quantBreakPoints")
devtools::unload()
devtools::load_all()
example("quantBreakPoints")
example("AQEval::quantBreakPoints")
example("quantBreakPoints")
devtools::unload()
devtools::document()
devtools::build()
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
require(AQEval)
example("quantBreakPoints")
packageVersion("segmented")
source("~/pkg/AQEval/AQEval/R/aqe.misc.R", echo=TRUE)
source("~/pkg/AQEval/AQEval/R/aqe.misc.R", echo=TRUE)
source("~/pkg/AQEval/AQEval/R/aqe.misc.R", echo=TRUE)
source("~/pkg/AQEval/AQEval/R/aqe.misc.R", echo=TRUE)
devtools::document()
devtools::document()
rm(list = c("aqe_buildBreaks", "aqe_fitBreakPointsModel", "aqe_fitBreakSegmentsModel01", "aqe_fitBreakSegmentsModel02", "aqe_makeBreakPointsReport", "aqe_makeBreakSegmentsReport", "aqe_makeSegmentsFromBreaks01", "aqe_plotQuantBreakPoints", "aqe_plotQuantBreakSegments01", "aqe_plotQuantBreakSegments02", "aqe_quickText", "aqe_summariseBreakPointsReport", "aqe_summariseBreakPointsReport.old", "aqe_summariseBreakSegmentsReport", "local_seg.lm.fit", "local_seg.lm.fit.boot", "local_segmented"))#
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
example("quantBreakSegmented")
devtools::unload()
devtools::load_all()
example("quantBreakSegmented")
devtools::unload()
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
require(segmented)
require(AQEval)
example("quantBreakSegmented")
example("quantBreakSegments")
install.packages("AQEval")
install.packages("AQEval")
install.packages("AQEval")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
install.packages("segmented")
require(AQEval)
packageVersion("segmented")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
require(remotes)
install_version("segmented", version = "1.3-4", repos = "http://cran.us.r-project.org")
require(AQEval)
example("quantBreakPoints")
packageVersion(segmented)
packageVersion("segmented")
edit(segmented::summary.segmented)
devtools::build()
devtools::document()
devtools::build()
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
devtools::document()
devtools::build()
devtools::load_all()
example("quantBreakPoints")
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
require(AQEval)
packageVersion(segmented)
packageVersion("segmented")
example("quantBreakPoints")
edit(segmented::confint.segmented)
devtools::document()
devtools::build()
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
devtools::document()
devtools::build()
require(remotes)
install_version("segmented", version = "1.3-4", repos = "http://cran.us.r-project.org")
edit(segmented::confint.segmented)
devtools::document()
devtools::build()
install.packages("~/pkg/AQEval/AQEval_0.2.11.tar.gz", repos = NULL, type = "source")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
packageVersion("segmented")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
packageVersion("segmented")
source("~/pkg/AQEval/AQEval/R/quantify.breaks.R")
source("~/pkg/AQEval/AQEval/R/quantify.breaks.R")
source("~/pkg/AQEval/AQEval/R/quantify.breaks.R")
grey.area::splate_date()
grey.area::splat_date()
grey.area::splat_version(increase = "0.0.1")
devtools::document()
rm(list = c("quantBreakPoints", "quantBreakSegments"))
devtools::document()
devtools::build()
install.packages("~/pkg/AQEval/AQEval_0.2.12.tar.gz", repos = NULL, type = "source")
install.packages("segmented")
require(AQEval)
example("quantBreakPoints")
?quantBreakPoints
devtools::document()
devtools::build()
devtools::check()
devtools::document()
importFrom
devtools::document()
source("~/pkg/AQEval/AQEval/R/aqe.misc.R", echo=TRUE)
devtools::document()
importFrom
?importFrom
??importFrom
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::doc()
devtools::document()
devtools::build()
devtools::check()
grey.area::splat_date()
grey.area::splat_version(version = "0.3.0")
usethis::use_gpl3_license()
usethis::use_pkgdown()
pkgdown::build_home_index
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::build_home()
devtools::document()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::init_site()
pkgdown::build_reference()
3/13
5/12ooo
5/12000
4\
4/12
3/13
devtools::document()
pkgdown::build_references()
pkgdown::build_reference()
pkgdown::build_news()
pkgdown::build_news()
devtools::build_readme()
pkgdown::build_news()
?pkgdown::build_news()
devtools::build()
install.packages("~/pkg/AQEval/AQEval_0.3.0.tar.gz", repos = NULL, type = "source")
devtools::build()
pkgdown::init_site()
pkgdown::build_site()
?pkgdown::build_news()
pkgdown::build_news()
pkgdown::init_site()
pkgdown::init_site()
pkgdown::init_site()
pkgdown::build_news()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_site()
utils::news()
pkgdown::init_site()
pkgdown::build_news()
usethis::use_news_md()
pkgdown::init_site()
pkgdown::build_news
pkgdown::build_news()
pkgdown::init_site()
pkgdown::build_site()
devtools::document()
devtools::build()
install.packages("~/pkg/AQEval/AQEval_0.3.0.tar.gz", repos = NULL, type = "source")
pkgdown::init_site()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::build_news()
pkgdown::init_site()
pkgdown::build_news()
pkgdown::build_news()
pkgdown::init_site()
pkgdown::build_news()
pkgdown::build_news()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::init_site()
pkgdown::build_home()
devtools::use_readme_rmd()
devtools::use_readme_rmd()
require(devtools)
use_readme_rmd()
use_news_md()
require(pkgdown)
build_site()
init_site()
build_site()
usethis::use_github_actions_badge()
init_site()
init_home()
build_home()
init_site()
remotess::install_github("karlropkins/AQEval")
remotes::install_github("karlropkins/AQEval")
require(AQEval)
packageVersion()
packageVersion("AQEval")
pkgdown::init_site()
pkgdown::build_site()
pkgdown::init_site()
